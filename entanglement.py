# -*- coding: utf-8 -*-
"""Entanglement.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W_GlyDRIfeJpjpjuXBvykki2KKvC547i
"""

from scipy import integrate
import scipy as scipy
import numpy as np
import matplotlib.pylab as plt
import math

def lims2(s1,t2,t1):
    return[0,s1]
def limt2(t1):
    return [0, t1]
def limt1(t1):
    return [0, t1]
def complexintegral1(func, lim, **kwargs):
    def real_func(x,y,z,t):
        return np.real(func(x,y,z,t))
    def imag_func(x,y,z,t):
        return np.imag(func(x,y,z,t))
    real_integral = integrate.nquad(real_func, lim, **kwargs)
    imag_integral = integrate.nquad(imag_func, lim, **kwargs)
    return (real_integral[0] + 1j*imag_integral[0])

def complexintegral2(func, lim, **kwargs):
    def real_func(x,y):
        return np.real(func(x,y))
    def imag_func(x,y):
        return np.imag(func(x,y))
    real_integral = integrate.nquad(real_func, lim, **kwargs)
    imag_integral = integrate.nquad(imag_func, lim, **kwargs)
    return (real_integral[0] + 1j*imag_integral[0])    

def complexintegral3(func, lim, **kwargs):
    def real_func(x,y,z,t,a,b,c):
        return np.real(func(x,y,z,t,a,b,c))
    def imag_func(x,y,z,t,a,b,c):
        return np.imag(func(x,y,z,t,a,b,c))
    real_integral = integrate.nquad(real_func, lim, **kwargs)
    imag_integral = integrate.nquad(imag_func, lim, **kwargs)
    return (real_integral[0] + 1j*imag_integral[0])

wa=1
gamma=0.05
rho=np.zeros((2,2),dtype=complex)
T=np.linspace(0,2,3)
Entanglement=np.zeros(len(T))
func1= lambda w1,w2,t2,t1 : w1**2*w2**2*np.exp(-gamma*t2)*np.exp(gamma*t1)*np.exp(1j*(w2-wa)*t2)*np.exp(-1j*(w1-wa)*t1)*np.exp(-(w1-wa)**2)*\
  np.exp(-w1**2)*np.exp(-(w2-wa)**2)*np.exp(-w2**2) 



func12 = lambda w1,w2,t2,t1 : w1**2*w2**2*np.exp(-gamma*t2)*np.exp(gamma*t1)*np.exp(1j*(w2-wa)*t2)*np.exp(-1j*(w1-wa)*t1)*np.exp(-(w1-wa)**2)*\
  np.exp(-w1**2)*np.exp(-(w2-wa)**2)*np.exp(-w2**2)

func2 = lambda w,t : w**2*np.exp(-gamma*t)*np.exp(1j*(w-wa)*t)*np.exp(-(w-wa)**2)*np.exp(-w**2)

func3 = lambda w,t : w**2*np.exp(-gamma*t)*np.exp(1j*(w-wa)*t)*np.exp(-(w-wa)**2)*np.exp(-w**2)

funcf = lambda  w1,w2,w3,s2,s1,t2,t1: w1**2*w2**2*w3**2*np.exp(gamma*t1)*np.exp(gamma*s1)*np.exp(-gamma*(t2+s2))*np.exp(1j*(w1-wa)*t1)*\
  np.exp(-(w2-wa)*s1)*np.exp(-1j*(w3-wa)*(t2-s2))*np.exp(-(w1-wa)**2)*np.exp(-w1**2)*np.exp(-(w2-wa)**2)*np.exp(-w2**2)*\
  np.absolute(np.exp(-(w3-wa)**2)*np.exp(-w3**2))**2



for i in range(len(T)):
  rho11=np.exp(-2*gamma*T[i])-2*np.exp(-2*gamma*T[i])*16*np.real(complexintegral1(func1, [[-5,5],[-5,5],limt2,[0,T[i]]]))+\
  np.exp(-2*gamma*T[i])*(64/(math.pi))*complexintegral3(funcf,[[-5,5],[-5,5],[-5,5],lims2,[0,T[i]],limt2,[0,T[i]]])+\
  np.exp(-2*gamma*T[i])*16*np.absolute(complexintegral1(func12, [[-5,5],[-5,5],limt2,[0,T[i]]]))**2

  rho12=-1j*np.exp(-gamma*T[i])*4*complexintegral2(func2,[[-5,5],[0,T[i]]])

  rho22=1-np.exp(-2*gamma*T[i])+16*np.absolute(complexintegral2(func3,[[-5,5],[0,T[i]]]))**2
  
  rho[0,0]=rho11
  rho[0,1]=rho12
  rho[1,0]=np.conjugate(rho12)
  rho[1,1]=rho22
  N=1/(np.trace(rho))
  rho=N*rho
  Entanglement[i]=1-np.trace(np.dot(rho,rho))
  print(rho11)
  print(rho11*rho22-np.absolute(rho12)**2)
  

plt.plot(T,Entanglement)
plt.xlabel("Time")
plt.ylabel("Entanglement")
plt.title("Entanglement vs Time")
plt.savefig('Entanglement40.png', format="PNG")